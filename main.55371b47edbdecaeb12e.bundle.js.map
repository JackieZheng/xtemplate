{"version":3,"file":"main.55371b47edbdecaeb12e.bundle.js","sources":["webpack:///./packages/xtemplate-runtime/src/commands.js","webpack:///./packages/xtemplate-runtime/src/escape-html.js"],"sourcesContent":["/**\n * native commands for xtemplate.\n */\n\nimport Scope from './scope';\nimport util from './util';\n\nconst commands = {\n  // range(start, stop, [step])\n  range(scope, option) {\n    const params = option.params;\n    const start = params[0];\n    const end = params[1];\n    let step = params[2];\n    if (\n      typeof process !== 'undefined' &&\n      process.env.NODE_ENV !== 'production'\n    ) {\n      if (\n        typeof start !== 'number' ||\n        typeof end !== 'number' ||\n        (step && typeof step !== 'number')\n      ) {\n        throw new Error('start/end/step of range must be type number!');\n      }\n    }\n    if (!step) {\n      step = start > end ? -1 : 1;\n    } else if ((start > end && step > 0) || (start < end && step < 0)) {\n      step = -step;\n    }\n    const ret = [];\n    for (let i = start; start < end ? i < end : i > end; i += step) {\n      ret.push(i);\n    }\n    return ret;\n  },\n\n  void() {\n    return undefined;\n  },\n\n  foreach(scope, option, buffer_) {\n    let buffer = buffer_;\n    const params = option.params;\n    const param0 = params[0];\n    const xindexName = params[2] || 'xindex';\n    const valueName = params[1];\n    let xcount;\n    let opScope;\n    let affix;\n    let xindex;\n    if (param0) {\n      xcount = param0.length;\n      for (xindex = 0; xindex < xcount; xindex++) {\n        opScope = new Scope(\n          param0[xindex],\n          {\n            xcount,\n            xindex,\n          },\n          scope,\n        );\n        affix = opScope.affix;\n        if (xindexName !== 'xindex') {\n          affix[xindexName] = xindex;\n          affix.xindex = undefined;\n        }\n        if (valueName) {\n          affix[valueName] = param0[xindex];\n        }\n        buffer = option.fn(opScope, buffer);\n      }\n    }\n    return buffer;\n  },\n\n  forin(scope, option, buffer_) {\n    let buffer = buffer_;\n    const params = option.params;\n    const param0 = params[0];\n    const xindexName = params[2] || 'xindex';\n    const valueName = params[1];\n    let opScope;\n    let affix;\n    let name;\n    // if undefined, will emit warning by compiler\n    if (param0) {\n      for (name in param0) {\n        if (param0.hasOwnProperty(name)) {\n          opScope = new Scope(\n            param0[name],\n            {\n              xindex: name,\n            },\n            scope,\n          );\n          affix = opScope.affix;\n          if (xindexName !== 'xindex') {\n            affix[xindexName] = name;\n            affix.xindex = undefined;\n          }\n          if (valueName) {\n            affix[valueName] = param0[name];\n          }\n          buffer = option.fn(opScope, buffer);\n        }\n      }\n    }\n    return buffer;\n  },\n\n  each(scope, option, buffer) {\n    const params = option.params;\n    const param0 = params[0];\n    if (param0) {\n      if (util.isArray(param0)) {\n        return commands.foreach(scope, option, buffer);\n      }\n      return commands.forin(scope, option, buffer);\n    }\n    return buffer;\n  },\n\n  with(scope, option, buffer_) {\n    let buffer = buffer_;\n    const params = option.params;\n    const param0 = params[0];\n    if (param0) {\n      // skip object check for performance\n      const opScope = new Scope(param0, undefined, scope);\n      buffer = option.fn(opScope, buffer);\n    }\n    return buffer;\n  },\n\n  if(scope, option, buffer_) {\n    let buffer = buffer_;\n    const params = option.params;\n    const param0 = params[0];\n    if (param0) {\n      const fn = option.fn;\n      if (fn) {\n        buffer = fn(scope, buffer);\n      }\n    } else {\n      let matchElseIf = false;\n      const elseIfs = option.elseIfs;\n      const inverse = option.inverse;\n      if (elseIfs) {\n        for (let i = 0, len = elseIfs.length; i < len; i++) {\n          const elseIf = elseIfs[i];\n          matchElseIf = elseIf.test(scope);\n          if (matchElseIf) {\n            buffer = elseIf.fn(scope, buffer);\n            break;\n          }\n        }\n      }\n      if (!matchElseIf && inverse) {\n        buffer = inverse(scope, buffer);\n      }\n    }\n    return buffer;\n  },\n\n  set(scope_, option, buffer) {\n    let scope = scope_;\n    const hash = option.hash;\n    const len = hash.length;\n    for (let i = 0; i < len; i++) {\n      const h = hash[i];\n      const parts = h.key;\n      let depth = h.depth;\n      const value = h.value;\n      if (parts.length === 1) {\n        const root = scope.root;\n        while (depth && root !== scope) {\n          scope = scope.parent;\n          --depth;\n        }\n        scope.set(parts[0], value);\n      } else {\n        const last = scope.resolve(parts.slice(0, -1), depth);\n        if (last) {\n          last[parts[parts.length - 1]] = value;\n        }\n      }\n    }\n    return buffer;\n  },\n\n  include: 1,\n\n  includeOnce: 1,\n\n  parse: 1,\n\n  extend: 1,\n\n  block(scope, option, buffer_) {\n    let buffer = buffer_;\n    const self = this;\n    const runtime = self.runtime;\n    const params = option.params;\n    let blockName = params[0];\n    let type;\n    if (params.length === 2) {\n      type = params[0];\n      blockName = params[1];\n    }\n    const blocks = (runtime.blocks = runtime.blocks || {});\n    const head = blocks[blockName];\n    let cursor;\n    const current = {\n      fn: option.fn,\n      type,\n    };\n    if (!head) {\n      blocks[blockName] = current;\n    } else if (head.type) {\n      if (head.type === 'append') {\n        current.next = head;\n        blocks[blockName] = current;\n      } else if (head.type === 'prepend') {\n        let prev;\n        cursor = head;\n        while (cursor && cursor.type === 'prepend') {\n          prev = cursor;\n          cursor = cursor.next;\n        }\n        current.next = cursor;\n        prev.next = current;\n      }\n    }\n\n    if (!runtime.extendTpl) {\n      cursor = blocks[blockName];\n      while (cursor) {\n        if (cursor.fn) {\n          buffer = cursor.fn.call(self, scope, buffer);\n        }\n        cursor = cursor.next;\n      }\n    }\n\n    return buffer;\n  },\n\n  macro(scope, option, buffer_) {\n    let buffer = buffer_;\n    const hash = option.hash;\n    const params = option.params;\n    const macroName = params[0];\n    const params1 = params.slice(1);\n    const self = this;\n    const runtime = self.runtime;\n    const macros = (runtime.macros = runtime.macros || {});\n    const macro = macros[macroName];\n    // definition\n    if (option.fn) {\n      macros[macroName] = {\n        paramNames: params1,\n        hash,\n        fn: option.fn,\n      };\n    } else if (macro) {\n      const paramValues = macro.hash || {};\n      const paramNames = macro.paramNames;\n      if (paramNames) {\n        for (let i = 0, len = paramNames.length; i < len; i++) {\n          const p = paramNames[i];\n          paramValues[p] = params1[i];\n        }\n      }\n      if (hash) {\n        for (const h in hash) {\n          if (hash.hasOwnProperty(h)) {\n            paramValues[h] = hash[h];\n          }\n        }\n      }\n      const newScope = new Scope(paramValues);\n      // https://github.com/xtemplate/xtemplate/issues/29\n      newScope.root = scope.root;\n      // no caller Scope\n      buffer = macro.fn.call(self, newScope, buffer);\n    } else {\n      const error = `can not find macro: ${macroName}`;\n      buffer.error(error);\n    }\n    return buffer;\n  },\n};\n\ncommands.debugger = function debuggerFn() {\n  util.globalEval('debugger');\n};\n\nexport default commands;\n","/*!\n * escape-html\n * Copyright(c) 2012-2013 TJ Holowaychuk\n * Copyright(c) 2015 Andreas Lubbe\n * Copyright(c) 2015 Tiancheng \"Timothy\" Gu\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module variables.\n * @private\n */\n\nvar matchHtmlRegExp = /[\"'&<>]/;\n\n/**\n * Escape special characters in the given string of html.\n *\n * @param  {string} string The string to escape for inserting into HTML\n * @return {string}\n * @public\n */\n\nfunction escapeHtml(string) {\n  var str = '' + string;\n  var match = matchHtmlRegExp.exec(str);\n\n  if (!match) {\n    return str;\n  }\n\n  var escape;\n  var html = '';\n  var index = 0;\n  var lastIndex = 0;\n\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34: // \"\n        escape = '&quot;';\n        break;\n      case 38: // &\n        escape = '&amp;';\n        break;\n      case 39: // '\n        escape = '&#39;';\n        break;\n      case 60: // <\n        escape = '&lt;';\n        break;\n      case 62: // >\n        escape = '&gt;';\n        break;\n      default:\n        continue;\n    }\n\n    if (lastIndex !== index) {\n      html += str.substring(lastIndex, index);\n    }\n\n    lastIndex = index + 1;\n    html += escape;\n  }\n\n  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\n}\n\nexport default escapeHtml;\n"],"mappings":"AAAA;;;;;;;ACeA","sourceRoot":""}